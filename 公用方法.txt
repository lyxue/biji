/**
 * Created by 7wingsfish on 2016/8/5.
 */
import {LOGIN_USER_EMP_INFO, CURRENT_CUSTOMER_INFO, AUTH_INFO, ALL_AUTH_INFO} from './constant';

export function setCache(key, value) {
  value = typeof value === 'string' ? value : JSON.stringify(value);
  deleteCache(key);
  window.sessionStorage.setItem(key, value)
}

export function setPersistenceCache(key, value) {
  console.log(key, value);
  value = typeof value === 'string' ? value : JSON.stringify(value);
  deleteCache(key);
  window.localStorage.setItem(key, value)
}

/**
 *
 * @param key
 * @param string 是否需要string类的数据，默认为false
 * @returns {*}
 */
export function getCache(key, string) {
  if (typeof global !== 'undefined') {
    return false
  }

  const cache = window.sessionStorage.getItem(key);
  return (string ? cache : JSON.parse(cache)) || false;
}

/**
 *
 * @param key
 * @param string 是否需要string类的数据，默认为false
 * @returns {*}
 */
export function getNewCache(key, string) {
  const cache = window.sessionStorage.getItem(key);
  return (string ? cache : JSON.parse(cache)) || false;
}

export function getPersistenceCache(key, string) {
  try {
    const cache = window.localStorage.getItem(key);
    return (string ? cache : JSON.parse(cache)) || false;
  } catch (e) {
    return false
  }
}

export function getCookie(name) {
  let arr, reg = new RegExp('(^| )' + name + '=([^;]*)(;|$)');
  if (arr = document.cookie.match(reg))
    return unescape(arr[2]);
  else
    return null;
}

export function setCookie(c_name, value, expiredays) {
  expiredays = expiredays || 7;
  var exdate = new Date();
  exdate.setDate(exdate.getDate() + expiredays);
  document.cookie = c_name + '=' + escape(value) +
    ((expiredays === null) ? '' : ';expires=' + exdate.toGMTString())
}

export function deleteCache(key,) {
  window.sessionStorage.setItem(key, '');
}

export function getLoggedEmployeeInfo() {
  return getCache(LOGIN_USER_EMP_INFO);
}

export function getCurrentCustomer() {
  return getCache(CURRENT_CUSTOMER_INFO);
}

export function getIsAuthorization() {
  return typeof global === 'undefined' ? parseInt(sessionStorage.getItem('is_authorization')) === 1 : false;
}

export function getAppAuth(appName) {
  const appAuth = getCache(AUTH_INFO);
  return appAuth[appName];
}

let authInfo;
const authMapping = {};

export function checkAuth(appName, buttonName) {
  if (!authInfo) {
    authInfo = getCache(ALL_AUTH_INFO);
    for (let auth of authInfo) {
      const key = getAuthPath(auth);
      if (auth.func_childs && auth.func_childs.length > 0) {
        authMapping[key] = getChildrenPath(auth.func_childs);
      }

    }
  }
  return (authMapping[appName] || []).indexOf(buttonName) !== -1;

}

function getAuthPath(item) {
  return item.func_path.replace(/.*\//, '');
}

function getChildrenPath(children) {
  return children.map(auth => {

    const key = getAuthPath(auth);
    if (auth.func_childs && auth.func_childs.length > 0) {
      authMapping[key] = getChildrenPath(auth.func_childs);
    }
    return getAuthPath(auth);
  });
}

export function getAuthorizationInfo(key) {
  return window.localStorage.getItem(key)
}

export function setAuthorizationInfo(key, value) {
  value = typeof value === 'string' ? value : JSON.stringify(value);
  window.localStorage.setItem(key, value)
}
